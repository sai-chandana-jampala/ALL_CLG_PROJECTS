eswar@hp-pavilion-x360-convertible-14-dh1xxx:~$ spark-shell --master spark://192.168.253.103:7077
Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
22/07/07 06:59:00 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
Spark context Web UI available at http://hp-pavilion-x360-convertible-14-dh1xxx:4040
Spark context available as 'sc' (master = spark://192.168.253.103:7077, app id = app-20220707065901-0000).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 3.2.1
      /_/
         
Using Scala version 2.12.15 (OpenJDK 64-Bit Server VM, Java 1.8.0_292)
Type in expressions to have them evaluated.
Type :help for more information.

scala> var data = sc.textFile("path of the data set ")
data: org.apache.spark.rdd.RDD[String] = /home/eswar/Desktop/africaeco.csv MapPartitionsRDD[1] at textFile at <console>:23


scala> val ecoafc = data.map{l =>
     | val s = l.split(',')
     | val (country,year,gdprise,gini,aggdem,aggsup,avg,ecoequi,percap,marcost,infrate,intrate) = (s(0), s(1),  s(2),  s(3),  s(4),  s(5),  s(6),  s(7),  s(8),  s(9),  s(10),  s(11))
     | (country,year,gdprise,gini,aggdem,aggsup,avg,ecoequi,percap,marcost,infrate,intrate)}
ecoafc: org.apache.spark.rdd.RDD[(String, String, String, String, String, String, String, String, String, String, String, String)] = MapPartitionsRDD[2] at map at <console>:23

scala> ecoafc.toDF.show(false)
+-----------+----+--------+-----+-------+-------+-------+-------+-------+--------+--------+--------+
|_1         |_2  |_3      |_4   |_5     |_6     |_7     |_8     |_9     |_10     |_11     |_12     |
+-----------+----+--------+-----+-------+-------+-------+-------+-------+--------+--------+--------+
|Country    |Year|GDP_rise|Gini |Agg_dem|Agg_sup|Avg CPI|Eco_Equ|Per_cap|mar_cost|inf_rate|int_rate|
|Nigeria    |1950|0       |0    |1.15   |8.55   |34.8   |258.66 |0      |0       |0       |0       |
|Ethiopia   |1950|2.1     |15.61|1.15   |8.55   |34.8   |258.66 |2.1    |15.61   |2.1     |15.61   |
|Egypt      |1950|0.468   |3.48 |1.15   |8.55   |34.8   |258.66 |0.468  |3.48    |0.66    |4.91    |
|DRcongo    |1950|0.15625 |1.16 |1.15   |8.55   |34.8   |258.66 |0.15625|1.16    |0.15625 |1.16    |
|Tanzania   |1950|1.65    |12.26|1.15   |8.55   |34.8   |258.66 |1.65   |12.26   |1.65    |12.26   |
|SouthAfrica|1950|1       |7.43 |1.15   |8.55   |34.8   |258.66 |1      |7.43    |1.25    |9.29    |
|Kenya      |1950|1.4     |10.41|1.15   |8.55   |34.8   |258.66 |1.4    |10.41   |1.4     |10.41   |
|Uganda     |1950|1.25    |9.29 |1.15   |8.55   |34.8   |258.66 |1.25   |9.29    |1.25    |9.29    |
|Algeria    |1950|1.25    |9.29 |1.15   |8.55   |34.8   |258.66 |1.25   |9.29    |1.4     |10.41   |
|Sudan      |1950|0       |0    |1.15   |8.55   |34.8   |258.66 |0      |0       |0       |0       |
|Morocco    |1950|0       |0    |1.15   |8.55   |34.8   |258.66 |0      |0       |0       |0       |
|Angola     |1950|1.25    |9.29 |1.15   |8.55   |34.8   |258.66 |1.25   |9.29    |1.25    |9.29    |
|Mozambique |1950|1.25    |9.29 |1.15   |8.55   |34.8   |258.66 |1.25   |9.29    |1.25    |9.29    |
|Ghana      |1950|1.15    |8.55 |1.15   |8.55   |34.8   |258.66 |1.15   |8.55    |1.15    |8.55    |
|Madagascar |1950|0       |0    |1.15   |8.55   |34.8   |258.66 |0      |0       |0       |0       |
|Cameron    |1950|1.15    |8.55 |1.15   |8.55   |34.8   |258.66 |1.15   |8.55    |1.15    |8.55    |
|cotetrichy |1950|0       |0    |1.15   |8.55   |34.8   |258.66 |0      |0       |0       |0       |
|Niger      |1950|0       |0    |1.15   |8.55   |34.8   |258.66 |0      |0       |0       |0       |
|BurkinaFaso|1950|0.65    |4.83 |1.15   |8.55   |34.8   |258.66 |0.65   |4.83    |0.75    |5.57    |
+-----------+----+--------+-----+-------+-------+-------+-------+-------+--------+--------+--------+
only showing top 20 rows




scala> val africa_eco = ecoafc.filter(_._1 != "Country")
africa_eco: org.apache.spark.rdd.RDD[(String, String, String, String, String, String, String, String, String, String, String, String)] = MapPartitionsRDD[10] at filter at <console>:23

scala> africa_eco.toDF("country","year","gdpri","gini","aggdem","aggsup","CPI","ecoequi","percap","marcost","infrate","intrate").show(false)
+-----------+----+-------+-----+------+------+----+-------+-------+-------+-------+-------+
|country    |year|gdpri  |gini |aggdem|aggsup|CPI |ecoequi|percap |marcost|infrate|intrate|
+-----------+----+-------+-----+------+------+----+-------+-------+-------+-------+-------+
|Nigeria    |1950|0      |0    |1.15  |8.55  |34.8|258.66 |0      |0      |0      |0      |
|Ethiopia   |1950|2.1    |15.61|1.15  |8.55  |34.8|258.66 |2.1    |15.61  |2.1    |15.61  |
|Egypt      |1950|0.468  |3.48 |1.15  |8.55  |34.8|258.66 |0.468  |3.48   |0.66   |4.91   |
|DRcongo    |1950|0.15625|1.16 |1.15  |8.55  |34.8|258.66 |0.15625|1.16   |0.15625|1.16   |
|Tanzania   |1950|1.65   |12.26|1.15  |8.55  |34.8|258.66 |1.65   |12.26  |1.65   |12.26  |
|SouthAfrica|1950|1      |7.43 |1.15  |8.55  |34.8|258.66 |1      |7.43   |1.25   |9.29   |
|Kenya      |1950|1.4    |10.41|1.15  |8.55  |34.8|258.66 |1.4    |10.41  |1.4    |10.41  |
|Uganda     |1950|1.25   |9.29 |1.15  |8.55  |34.8|258.66 |1.25   |9.29   |1.25   |9.29   |
|Algeria    |1950|1.25   |9.29 |1.15  |8.55  |34.8|258.66 |1.25   |9.29   |1.4    |10.41  |
|Sudan      |1950|0      |0    |1.15  |8.55  |34.8|258.66 |0      |0      |0      |0      |
|Morocco    |1950|0      |0    |1.15  |8.55  |34.8|258.66 |0      |0      |0      |0      |
|Angola     |1950|1.25   |9.29 |1.15  |8.55  |34.8|258.66 |1.25   |9.29   |1.25   |9.29   |
|Mozambique |1950|1.25   |9.29 |1.15  |8.55  |34.8|258.66 |1.25   |9.29   |1.25   |9.29   |
|Ghana      |1950|1.15   |8.55 |1.15  |8.55  |34.8|258.66 |1.15   |8.55   |1.15   |8.55   |
|Madagascar |1950|0      |0    |1.15  |8.55  |34.8|258.66 |0      |0      |0      |0      |
|Cameron    |1950|1.15   |8.55 |1.15  |8.55  |34.8|258.66 |1.15   |8.55   |1.15   |8.55   |
|cotetrichy |1950|0      |0    |1.15  |8.55  |34.8|258.66 |0      |0      |0      |0      |
|Niger      |1950|0      |0    |1.15  |8.55  |34.8|258.66 |0      |0      |0      |0      |
|BurkinaFaso|1950|0.65   |4.83 |1.15  |8.55  |34.8|258.66 |0.65   |4.83   |0.75   |5.57   |
|mali       |1950|0      |0    |1.15  |8.55  |34.8|258.66 |0      |0      |0      |0      |
+-----------+----+-------+-----+------+------+----+-------+-------+-------+-------+-------+
only showing top 20 rows

//Question1: Doing time series analysis for gdpri of each year from 1950 - 2002
scala> val gdpriTime = africa_eco.map(l => (l._1,(l._2,l._3)))
gdpriTime: org.apache.spark.rdd.RDD[(String, (String, String))] = MapPartitionsRDD[14] at map at <console>:23

scala> val tanzaniaData = gdpriTime.filter(_._1 == "Tanzania")
tanzaniaData: org.apache.spark.rdd.RDD[(String, (String, String))] = MapPartitionsRDD[15] at filter at <console>:23


scala> tanzaniaData.toDF("Country","Year and GDP rise").show(false)
+--------+-----------------+
|Country |Year and GDP rise|
+--------+-----------------+
|Tanzania|{1950, 1.65}     |
|Tanzania|{1951, 1.65}     |
|Tanzania|{1952, 1.65}     |
|Tanzania|{1953, 1.65}     |
|Tanzania|{1954, 1.65}     |
|Tanzania|{1955, 1.65}     |
|Tanzania|{1956, 1.65}     |
|Tanzania|{1957, 1.65}     |
|Tanzania|{1958, 2}        |
|Tanzania|{1959, 2}        |
|Tanzania|{1960, 2}        |
|Tanzania|{1961, 2.9}      |
|Tanzania|{1962, 2.9}      |
|Tanzania|{1963, 3.35}     |
|Tanzania|{1964, 3.35}     |
|Tanzania|{1965, 3.35}     |
|Tanzania|{1966, 3.35}     |
|Tanzania|{1967, 3.35}     |
|Tanzania|{1968, 3.35}     |
|Tanzania|{1969, 3.35}     |
+--------+-----------------+
only showing top 20 rows

//Question 2: Find mean gdpri for all years from 1950 to 2002

scala> val gdpri_inc = africa_eco.map{ l => (l._1, (l._2, l._3)) }
gdpri_inc: org.apache.spark.rdd.RDD[(String, (String, String))] = MapPartitionsRDD[19] at map at <console>:23

scala> val gdpri_meanbyyear = gdpri_inc.map{ case (ctry, (yr, gdpri)) => (ctry, gdpri.toDouble/53.0) }.reduceByKey(_+_).sortBy(_._1, false)
gdpri_meanbyyear: org.apache.spark.rdd.RDD[(String, Double)] = MapPartitionsRDD[26] at sortBy at <console>:23


scala> gdpri_meanbyyear.toDF("Country", "Mean of gdpri by year").show(false)
+------------+---------------------+
|Country     |Mean of gdpri by year|
+------------+---------------------+
|mali        |0.0                  |
|malawi      |4.84811320754717     |
|cotetrichy  |3.3584905660377364   |
|Zimbabwe    |4.540566037735849    |
|Zambia      |4.645283018867925    |
|Wyoming     |2.8386792452830183   |
|Wisconsin   |4.355660377358491    |
|Vermont     |5.140377358490566    |
|Utah        |4.083962264150943    |
|Uganda      |4.489622641509434    |
|Tunisia     |4.13679245283019     |
|Togo        |4.408490566037736    |
|Tanzania    |5.175471698113208    |
|Sudan       |2.1609433962264153   |
|SouthAfrica |4.253018867924529    |
|Seychelles  |4.333018867924528    |
|Senegal     |5.24245283018868     |
|Rwanda      |0.0                  |
|Rhode Island|4.929245283018869    |
|Puerto Rico |1.9613207547169806   |
+------------+---------------------+
only showing top 20 rows

//Question 3: Find country having max gdpri for all years

scala> for(i<- 1950 until 2002){
     | val maxInYear = africa_eco.filter(_._2 == i.toString).map(l=>((l._2.toInt,l._1),l._3.toDouble)).map{case ((yr,ctry),gd) => gd}.reduce(_ max _)
     | val maxcountryinYear = africa_eco.filter(_._2 == i.toString).map(l=>((l._2.toInt,l._1),l._3.toDouble)).filter(_._2 == maxInYear).collect().toList
     | println(maxcountryinYear)
     | }
List(((1950,Ethiopia),2.1))
List(((1951,Ethiopia),2.1))
List(((1952,Ethiopia),2.1))
List(((1953,Ethiopia),2.1))
List(((1954,Ethiopia),2.1))
List(((1955,Ethiopia),2.1))
List(((1956,Ethiopia),2.1))
List(((1957,Ethiopia),2.1))
List(((1958,Ethiopia),2.8))
List(((1959,Ethiopia),2.8))
List(((1960,Ethiopia),2.8))
List(((1961,Ethiopia),3.4))
List(((1962,Ethiopia),3.6))
List(((1963,Ethiopia),3.85))
List(((1964,Ethiopia),3.85))
List(((1965,Ethiopia),3.85))
List(((1966,Ethiopia),3.85))
List(((1967,Ethiopia),3.85))
List(((1968,Ethiopia),3.85))
List(((1969,Ethiopia),3.85))
List(((1970,Ethiopia),3.85), ((1970,Mozambique),3.85))
List(((1971,Ethiopia),3.85), ((1971,Mozambique),3.85))
List(((1972,Ethiopia),3.85), ((1972,Mozambique),3.85))
List(((1973,Gambia),4.75))
List(((1974,Ethiopia),4.75), ((1974,Gambia),4.75))
List(((1975,Ethiopia),4.75), ((1975,Gambia),4.75))
List(((1976,Mozambique),5.25))
List(((1977,Mozambique),5.25))
List(((1978,Algeria),5.25), ((1978,Mozambique),5.25))
List(((1979,Algeria),5.75))
List(((1980,Algeria),6.15))
List(((1981,Algeria),6.15))
List(((1982,Gambia),6.5), ((1982,CaboVerde),6.5))
List(((1983,Senegal),6.75))
List(((1984,CaboVerde),6.9))
List(((1985,Ethiopia),7.15))
List(((1986,CaboVerde),7.16))
List(((1987,CaboVerde),7.35))
List(((1988,CaboVerde),7.63))
List(((1989,CaboVerde),7.93))
List(((1990,CaboVerde),8.07))
List(((1991,CaboVerde),8.55))
List(((1992,CaboVerde),8.55))
List(((1993,CaboVerde),8.67))
List(((1994,CaboVerde),9.04))
List(((1995,CaboVerde),9.19))
List(((1996,Algeria),9.5))
List(((1997,Algeria),10.5))
List(((1998,Algeria),11.5))
List(((1999,Algeria),11.5))
List(((2000,Algeria),13.25))
List(((2001,Algeria),14.0))

//Question 4: Compare gdpri and aggdem year by year for a given country

scala>  var goodcountries = africa_eco.map(l => (l._2,l._1,l._3,l._5,l._3.toFloat - l._5.toFloat)).filter(_._5 > 0.0).map{case (yr,ctry,gdpri,aggdem,dif) => (yr,ctry,gdpri,aggdem)}
goodcountries: org.apache.spark.rdd.RDD[(String, String, String, String)] = MapPartitionsRDD[347] at map at <console>:23


scala> goodcountries.toDF("Year","Country","gdpri","aggdem").show(false)
+----+------------+-----+------+
|Year|Country     |gdpri|aggdem|
+----+------------+-----+------+
|1950|Ethiopia    |2.1  |1.15  |
|1950|Tanzania    |1.65 |1.15  |
|1950|Kenya       |1.4  |1.15  |
|1950|Uganda      |1.25 |1.15  |
|1950|Algeria     |1.25 |1.15  |
|1950|Angola      |1.25 |1.15  |
|1950|Mozambique  |1.25 |1.15  |
|1950|malawi      |1.4  |1.15  |
|1950|Senegal     |1.6  |1.15  |
|1950|Zimbabwe    |1.25 |1.15  |
|1950|Nevada      |1.25 |1.15  |
|1950|Togo        |1.4  |1.15  |
|1950|Libya       |1.4  |1.15  |
|1950|Liberia     |1.6  |1.15  |
|1950|Gambia      |1.25 |1.15  |
|1950|Rhode Island|1.4  |1.15  |
|1950|Vermont     |1.4  |1.15  |
|1950|CaboVerde   |1.6  |1.15  |
|1950|Wisconsin   |1.25 |1.15  |
|1950|Wyoming     |1.2  |1.15  |
+----+------------+-----+------+
only showing top 20 rows


scala> var badCountries = africa_eco.map(l => (l._2,l._1,l._3,l._5,l._3.toFloat - l._5.toFloat)).filter(_._5 < 0.0).map{case (yr,ctry,gdpri,aggdem,dif) => (yr,ctry,gdpri,aggdem)}  
badCountries: org.apache.spark.rdd.RDD[(String, String, String, String)] = MapPartitionsRDD[353] at map at <console>:23

scala> badCountries.toDF("country","year","gdpri","aggdem").show(false)
+-------+-----------+-------+------+
|country|year       |gdpri  |aggdem|
+-------+-----------+-------+------+
|1950   |Nigeria    |0      |1.15  |
|1950   |Egypt      |0.468  |1.15  |
|1950   |DRcongo    |0.15625|1.15  |
|1950   |SouthAfrica|1      |1.15  |
|1950   |Sudan      |0      |1.15  |
|1950   |Morocco    |0      |1.15  |
|1950   |Madagascar |0      |1.15  |
|1950   |cotetrichy |0      |1.15  |
|1950   |Niger      |0      |1.15  |
|1950   |BurkinaFaso|0.65   |1.15  |
|1950   |mali       |0      |1.15  |
|1950   |Zambia     |1      |1.15  |
|1950   |Guinea     |0.7    |1.15  |
|1950   |Rwanda     |0      |1.15  |
|1950   |Benin      |0      |1.15  |
|1950   |Burundi    |0      |1.15  |
|1950   |Tunisia    |1      |1.15  |
|1950   |Mauritania |1      |1.15  |
|1950   |Eritrea    |1      |1.15  |
|1950   |Namibia    |0.75   |1.15  |
+-------+-----------+-------+------+
only showing top 20 rows

//Question 5: Compare gdpri and aggdem year by year for a given country to check countrys condition in that particular year

scala> val aggcomp = africa_eco.map(l=>(l._2,l._5.toDouble)).reduceByKey(_ max _).sortByKey()
aggcomp: org.apache.spark.rdd.RDD[(String, Double)] = ShuffledRDD[361] at sortByKey at <console>:23

scala> aggcomp.toDF("year","aggdem").show(false)
+-------+------+
|year   |aggdem|
+-------+------+
|1950   |1.15  |
|1951   |1.15  |
|1952   |1.3   |
|1953   |1.3   |
|1954   |1.6   |
|1955   |1.6   |
|1956   |1.6   |
|1957   |1.6   |
|1958   |2.2   |
|1959   |2.2   |
|1960   |2.2   |
|1961   |2.9   |
|1962   |3.1   |
|1963   |3.35  |
|1964   |3.35  |
|1965   |3.35  |
|1966   |3.35  |
|1967   |3.35  |
|1968   |3.35  |
|1969   |3.35  |
+-------+------+
only showing top 20 rows

//Question 6: Compute Positive growth and Negative growth  by finding maximun of aggsup and aggdem for all countries for all years

scala> val growth = africa_eco.map{ l => ((l._2,l._1),if (l._5.toDouble>l._6.toDouble) l._5.toDouble else l._6.toDouble) }
growth: org.apache.spark.rdd.RDD[((String, String), Double)] = MapPartitionsRDD[365] at map at <console>:23

scala> growth.toDF("Year and Country","Growth").show(false)
+-------------------+------+
|Year and Country   |Growth|
+-------------------+------+
|{1950, Nigeria}    |8.55  |
|{1950, Ethiopia}   |8.55  |
|{1950, Egypt}      |8.55  |
|{1950, DRcongo}    |8.55  |
|{1950, Tanzania}   |8.55  |
|{1950, SouthAfrica}|8.55  |
|{1950, Kenya}      |8.55  |
|{1950, Uganda}     |8.55  |
|{1950, Algeria}    |8.55  |
|{1950, Sudan}      |8.55  |
|{1950, Morocco}    |8.55  |
|{1950, Angola}     |8.55  |
|{1950, Mozambique} |8.55  |
|{1950, Ghana}      |8.55  |
|{1950, Madagascar} |8.55  |
|{1950, Cameron}    |8.55  |
|{1950, cotetrichy} |8.55  |
|{1950, Niger}      |8.55  |
|{1950, BurkinaFaso}|8.55  |
|{1950, mali}       |8.55  |
+-------------------+------+
only showing top 20 rows

scala> val ginivsintrate = africa_eco.map{ l => ((l._2,l._1),if (l._4.toDouble>l._12.toDouble) l._4.toDouble else l._12.toDouble) }
ginivsintrate: org.apache.spark.rdd.RDD[((String, String), Double)] = MapPartitionsRDD[369] at map at <console>:23

scala> ginivsintrate.toDF("Year and Country","Gini Index vs Intrest").show(false)
+-------------------+---------------------+
|Year and Country   |Gini Index vs Intrest|
+-------------------+---------------------+
|{1950, Nigeria}    |0.0                  |
|{1950, Ethiopia}   |15.61                |
|{1950, Egypt}      |4.91                 |
|{1950, DRcongo}    |1.16                 |
|{1950, Tanzania}   |12.26                |
|{1950, SouthAfrica}|9.29                 |
|{1950, Kenya}      |10.41                |
|{1950, Uganda}     |9.29                 |
|{1950, Algeria}    |10.41                |
|{1950, Sudan}      |0.0                  |
|{1950, Morocco}    |0.0                  |
|{1950, Angola}     |9.29                 |
|{1950, Mozambique} |9.29                 |
|{1950, Ghana}      |8.55                 |
|{1950, Madagascar} |0.0                  |
|{1950, Cameron}    |8.55                 |
|{1950, cotetrichy} |0.0                  |
|{1950, Niger}      |0.0                  |
|{1950, BurkinaFaso}|5.57                 |
|{1950, mali}       |0.0                  |
+-------------------+---------------------+
only showing top 20 rows
 
//Question 7: Computing growth % change between a year and 2020 by dividing marginal cost with per capita
                                                                  
scala> val growthpercent = ginivsintrate.join(growth).map{ case((yr,ctry),(ginivsintrate,growth))=>((yr,ctry),ginivsintrate/growth*100)}.sortByKey()
growthpercent: org.apache.spark.rdd.RDD[((String, String), Double)] = ShuffledRDD[379] at sortByKey at <console>:24

scala> growthpercent.toDF("year and country","Growth percent").show(false)
+-------------------+------------------+
|year and country   |Growth percent    |
+-------------------+------------------+
|{1950, Algeria}    |121.75438596491229|
|{1950, Angola}     |108.6549707602339 |
|{1950, Benin}      |0.0               |
|{1950, Botswana}   |100.0             |
|{1950, BurkinaFaso}|65.14619883040935 |
|{1950, Burundi}    |0.0               |
|{1950, CaboVerde}  |139.06432748538012|
|{1950, Cameron}    |100.0             |
|{1950, Comoros}    |0.0               |
|{1950, Congo}      |121.75438596491229|
|{1950, DRcongo}    |13.567251461988302|
|{1950, Djibouti}   |0.0               |
|{1950, Egypt}      |57.42690058479531 |
|{1950, Eritrea}    |108.6549707602339 |
|{1950, Eswatini}   |0.0               |
|{1950, Ethiopia}   |182.57309941520467|
|{1950, Gabon}      |0.0               |
|{1950, Gambia}     |108.6549707602339 |
|{1950, Ghana}      |100.0             |
|{1950, Guinea}     |100.0             |
+-------------------+------------------+
only showing top 20 rows

//Question 8: Find years which don't meet change in Growth index to change in Average CPI and notify if inflation need is not being met

scala> val cpiGrowth = africa_eco.map{ l => ((l._2,l._1),(l._8.toDouble/l._7.toDouble)*100)}
cpiGrowth: org.apache.spark.rdd.RDD[((String, String), Double)] = MapPartitionsRDD[383] at map at <console>:23

scala> cpiGrowth.toDF("country and year","CPI Growth").show(false)
+-------------------+-----------------+
|country and year   |CPI Growth       |
+-------------------+-----------------+
|{1950, Nigeria}    |743.2758620689657|
|{1950, Ethiopia}   |743.2758620689657|
|{1950, Egypt}      |743.2758620689657|
|{1950, DRcongo}    |743.2758620689657|
|{1950, Tanzania}   |743.2758620689657|
|{1950, SouthAfrica}|743.2758620689657|
|{1950, Kenya}      |743.2758620689657|
|{1950, Uganda}     |743.2758620689657|
|{1950, Algeria}    |743.2758620689657|
|{1950, Sudan}      |743.2758620689657|
|{1950, Morocco}    |743.2758620689657|
|{1950, Angola}     |743.2758620689657|
|{1950, Mozambique} |743.2758620689657|
|{1950, Ghana}      |743.2758620689657|
|{1950, Madagascar} |743.2758620689657|
|{1950, Cameron}    |743.2758620689657|
|{1950, cotetrichy} |743.2758620689657|
|{1950, Niger}      |743.2758620689657|
|{1950, BurkinaFaso}|743.2758620689657|
|{1950, mali}       |743.2758620689657|
+-------------------+-----------------+
only showing top 20 rows

//Question 9: Compare percap and infrate and find if a given year had two or more different min wages

scala> val passiveyears = cpiGrowth.join(growthpercent)
passiveyears: org.apache.spark.rdd.RDD[((String, String), (Double, Double))] = MapPartitionsRDD[389] at join at <console>:24

scala> passiveyears.toDF("Year and Country","growth percent and CPI").show(false)
+-------------------+----------------------------------------+
|Year and Country   |growth percent and CPI                  |
+-------------------+----------------------------------------+
|{1963, Tanzania}   |{284.5544554455446, 100.0}              |
|{1953, SouthAfrica}|{638.6666666666667, 96.144578313253}    |
|{1950, Senegal}    |{743.2758620689657, 139.06432748538012} |
|{1969, BurkinaFaso}|{227.693661971831, 64.22018348623854}   |
|{1955, Eritrea}    |{582.5675675675677, 90.66523605150213}  |
|{1966, Niger}      |{248.95091434071222, 47.72182254196643} |
|{1956, mali}       |{524.6653144016227, 0.0}                |
|{1964, DRcongo}    |{268.0414507772021, 80.62360801781738}  |
|{1969, Rwanda}     |{227.693661971831, 0.0}                 |
|{1974, Madagascar} |{184.36208125445475, 100.0}             |
|{1969, Comoros}    |{227.693661971831, 79.03014416775885}   |
|{1974, Namibia}    |{184.36208125445475, 100.0}             |
|{1974, Kenya}      |{184.36208125445475, 100.38265306122449}|
|{1951, Rwanda}     |{704.7956403269754, 0.0}                |
|{1973, Eritrea}    |{189.91189427312779, 89.47368421052632} |
|{1972, Gambia}     |{197.90359602142314, 100.0}             |
|{1970, Zimbabwe}   |{218.64750633981407, 100.0}             |
|{1960, Ethiopia}   |{396.717791411043, 127.262313860252}    |
|{1963, Gabon}      |{284.5544554455446, 0.0}                |
|{1955, Kenya}      |{582.5675675675677, 115.66523605150213} |
+-------------------+----------------------------------------+
only showing top 20 rows


scala> val passive = cpiGrowth.join(growthpercent).map{case ((yr,ctry),(gp,cp))=>(yr,ctry,gp-cp)}.filter(_._3 >= 0).map{case(a,b,c)=>(a,b)}
passive: org.apache.spark.rdd.RDD[(String, String)] = MapPartitionsRDD[398] at map at <console>:24

scala> passive.toDF("Year","Passive Paying Country").show(false)
+----+----------------------+
|Year|Passive Paying Country|
+----+----------------------+
|1963|Tanzania              |
|1953|SouthAfrica           |
|1950|Senegal               |
|1969|BurkinaFaso           |
|1955|Eritrea               |
|1966|Niger                 |
|1956|mali                  |
|1964|DRcongo               |
|1969|Rwanda                |
|1974|Madagascar            |
|1969|Comoros               |
|1974|Namibia               |
|1974|Kenya                 |
|1951|Rwanda                |
|1973|Eritrea               |
|1972|Gambia                |
|1970|Zimbabwe              |
|1960|Ethiopia              |
|1963|Gabon                 |
|1955|Kenya                 |
+----+----------------------+
only showing top 20 rows

scala> val dolCompare = africa_eco.map(l => ((l._2,l._1),(l._10,l._12),l._10.toDouble - l._12.toDouble)).filter(_._3 != 0).map{case (a,b,c)=>(a,b)}
dolCompare: org.apache.spark.rdd.RDD[((String, String), (String, String))] = MapPartitionsRDD[404] at map at <console>:23

scala> dolCompare.toDF("Year and Country","percap income").show(false) 
+-------------------+-------------+
|Year and Country   |percap income|
+-------------------+-------------+
|{1950, Egypt}      |{3.48, 4.91} |
|{1950, SouthAfrica}|{7.43, 9.29} |
|{1950, Algeria}    |{9.29, 10.41}|
|{1950, BurkinaFaso}|{4.83, 5.57} |
|{1950, Zambia}     |{7.43, 8.55} |
|{1950, Guinea}     |{5.2, 8.55}  |
|{1950, Congo}      |{8.55, 10.41}|
|{1950, Eritrea}    |{7.43, 9.29} |
|{1950, Namibia}    |{5.57, 9.29} |
|{1950, Puerto Rico}|{3.2, 11.89} |
|{1950, Lesotho}    |{3.16, 3.72} |
|{1950, Utah}       |{7.43, 8.55} |
|{1951, Egypt}      |{3.3, 4.65}  |
|{1951, SouthAfrica}|{7.05, 8.81} |
|{1951, Algeria}    |{8.81, 9.87} |
|{1951, BurkinaFaso}|{4.58, 5.29} |
|{1951, Zambia}     |{7.05, 8.11} |
|{1951, Guinea}     |{4.93, 8.11} |
|{1951, Congo}      |{8.11, 9.87} |
|{1951, Eritrea}    |{7.05, 8.81} |
+-------------------+-------------+
only showing top 20 rows

// Question 10: Compare inflation rate and interest rate

scala> val compDOLlow = africa_eco.map(l => ((l._2,l._1),(l._9,l._10)))
compDOLlow: org.apache.spark.rdd.RDD[((String, String), (String, String))] = MapPartitionsRDD[408] at map at <console>:23

scala> val compDOLlow = africa_eco.map(l => ((l._2,l._1),(l._11,l._12)))
compDOLlow: org.apache.spark.rdd.RDD[((String, String), (String, String))] = MapPartitionsRDD[409] at map at <console>:23

scala> compDOLlow.toDF("Year and country","inflation rate and interest rate").show(false)
+-------------------+--------------------------------+
|Year and country   |inflation rate and interest rate|
+-------------------+--------------------------------+
|{1950, Nigeria}    |{0, 0}                          |
|{1950, Ethiopia}   |{2.1, 15.61}                    |
|{1950, Egypt}      |{0.66, 4.91}                    |
|{1950, DRcongo}    |{0.15625, 1.16}                 |
|{1950, Tanzania}   |{1.65, 12.26}                   |
|{1950, SouthAfrica}|{1.25, 9.29}                    |
|{1950, Kenya}      |{1.4, 10.41}                    |
|{1950, Uganda}     |{1.25, 9.29}                    |
|{1950, Algeria}    |{1.4, 10.41}                    |
|{1950, Sudan}      |{0, 0}                          |
|{1950, Morocco}    |{0, 0}                          |
|{1950, Angola}     |{1.25, 9.29}                    |
|{1950, Mozambique} |{1.25, 9.29}                    |
|{1950, Ghana}      |{1.15, 8.55}                    |
|{1950, Madagascar} |{0, 0}                          |
|{1950, Cameron}    |{1.15, 8.55}                    |
|{1950, cotetrichy} |{0, 0}                          |
|{1950, Niger}      |{0, 0}                          |
|{1950, BurkinaFaso}|{0.75, 5.57}                    |
|{1950, mali}       |{0, 0}                          |
+-------------------+--------------------------------+
only showing top 20 rows

// Question find maximum marginal cost in particular year
scala> for(i<- 1950 until 2002){
     | val maxmcInYear = africa_eco.filter(_._2 == i.toString).map(l=>((l._2.toInt,l._1),l._10.toDouble)).map{case ((yr,ctry),mc) => mc}.reduce(_ max _)
     | val maxmccountryinYear = africa_eco.filter(_._2 == i.toString).map(l=>((l._2.toInt,l._1),l._10.toDouble)).filter(_._2 == maxmcInYear).collect().toList
     |  println(maxmccountryinYear)
     | }
List(((1950,Ethiopia),15.61))
List(((1951,Ethiopia),14.8))
List(((1952,Ethiopia),14.0))
List(((1953,Ethiopia),13.41))
List(((1954,Ethiopia),12.99))
List(((1955,Ethiopia),12.23))
List(((1956,Ethiopia),11.02))
List(((1957,Ethiopia),10.1))
List(((1958,Ethiopia),12.73))
List(((1959,Ethiopia),11.95))
List(((1960,Ethiopia),11.11))
List(((1961,Ethiopia),12.11))
List(((1962,Ethiopia),11.3))
List(((1963,Ethiopia),10.96))
List(((1964,Ethiopia),10.32))
List(((1965,Ethiopia),10.0))
List(((1966,Ethiopia),9.58))
List(((1967,Ethiopia),9.26))
List(((1968,Ethiopia),9.09))
List(((1969,Ethiopia),8.77))
List(((1970,Ethiopia),8.42), ((1970,Mozambique),8.42))
List(((1971,Ethiopia),8.03), ((1971,Mozambique),8.03))
List(((1972,Ethiopia),7.62), ((1972,Mozambique),7.62))
List(((1973,Gambia),9.02))
List(((1974,Ethiopia),8.76), ((1974,Gambia),8.76))
List(((1975,Ethiopia),8.5), ((1975,Gambia),8.5))
List(((1976,Mozambique),9.16))
List(((1977,Mozambique),8.91))
List(((1978,Algeria),8.65), ((1978,Mozambique),8.65))
List(((1979,Algeria),9.27))
List(((1980,Algeria),9.76))
List(((1981,Algeria),9.55))
List(((1982,Gambia),9.76), ((1982,CaboVerde),9.76))
List(((1983,Senegal),9.86))
List(((1984,CaboVerde),9.92))
List(((1985,Ethiopia),10.05))
List(((1986,CaboVerde),9.8))
List(((1987,CaboVerde),9.73))
List(((1988,CaboVerde),9.79))
List(((1989,CaboVerde),9.89))
List(((1990,CaboVerde),9.7))
List(((1991,CaboVerde),10.31))
List(((1992,CaboVerde),10.14))
List(((1993,CaboVerde),9.97))
List(((1994,CaboVerde),10.18))
List(((1995,CaboVerde),10.2))
List(((1996,Algeria),10.38))
List(((1997,Algeria),11.46))
List(((1998,Algeria),12.39))
List(((1999,Algeria),12.14))
List(((2000,Algeria),13.65))
List(((2001,Algeria),14.16))


